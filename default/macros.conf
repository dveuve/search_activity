[audit_regex_high_complexity_search_commands]
definition = "(spath|tscollect|loadjob|streamstats|eventstats|sistats|nomv|cluster|arules|associate|anomalies|rare|autoregress|contingency|correlate|mvexpand)"
iseval = 0

[audit_regex_low_complexity_search_commands]
definition = "(dedup|table|pivot)"
iseval = 0

[audit_regex_med_complexity_search_commands]
definition = "(stats|inputlookup|rename|lookup|eval|makemv|mvexpand|join|append)"
iseval = 0

[audit_tscollect_lookup]
definition = eval nolookup="lookup local=t LDAPSearch sAMAccountName as user OUTPUT c, cn, description, displayName, dn, givenName, l, mail, manager, name, o, sAMAccountName, sn, st, title, whenChanged | lookup local=t LDAPMgmtChain sAMAccountName as user OUTPUT ManagementChain ManagementChain_sAMAccountName managerdisplayname as ManagerName | rename manager as ManagerDN mail as email dn as distinguishedName displayName as name c as city l as location o as organization st as state "
iseval = 0

[auditindex]
definition = index=_audit
iseval = 0

[auditsourcetype]
definition = sourcetype=audittrail OR sourcetype=splunk_audit
iseval = 0

[eval_high_complexity_search_commands]
definition = 10*if(match(searchcommands, `audit_regex_high_complexity_search_commands`),count,0)
iseval = 0

[eval_low_complexity_search_commands]
definition = 2*if(match(searchcommands, `audit_regex_low_complexity_search_commands`),count,0)
iseval = 0

[eval_med_complexity_search_commands]
definition = 5*if(match(searchcommands, `audit_regex_med_complexity_search_commands`),count,0)
iseval = 0

[internal_index]
definition = index=_internal

iseval = 0

[max_search_complexity_rating]
definition = 5
iseval = 0

[metrics_sourcetype]
definition = sourcetype=splunkd
iseval = 0

[scheduler_sourcetype]
definition = sourcetype=splunkd\

iseval = 0

[web_access_sourcetype]
definition = sourcetype=splunk_web_access\

iseval = 0

[UserOrName]
definition = user
iseval = 0


[FillEvents_TSCollect]
definition = | tscollect namespace=`SA_Events` keepresults=t
iseval = 0

[FillSearchHistory_TSCollect]
definition = | tscollect namespace=`SA_SearchHistory` keepresults=t
iseval = 0

[FillSearchHistory_Search]
definition = `auditindex` `auditsourcetype` action=search (((info=granted AND search=*) OR info=canceled OR info=failed OR info=completed) NOT searchid=searchparsetmp*) OR (REST events OR results OR acl OR export) | regex actualsearch!="^\s*\|\s*history" | regex actualsearch!="^\s*typeahead" | regex actualsearch!="^\s*\|\s*eventcount" | regex actualsearch!="^\s*\|\s*metadata" | rex "\s\/.*?\/jobs\/.*?\/(?<myaction>(results|events|acl|control))\]" | eval actualsearchnodm = actualsearch | rex mode=sed field=actualsearchnodm "s/(\||^)\s*\`?(datamodel|pivot).*/| $1 $2/" | rex "\s\/.*?\/jobs\/.*?\/(events|results)\/(?<exported>export)\]" | stats min(eval(if(total_run_time >= 0 AND info!="granted" AND scan_count >= 0,_time,null))) as finaltime  count(eval(myaction="acl")) as ACLHit  values(searchspan*) as searchspan* sum(total_run_time) as total_run_time sum(result_count) as result_count sum(event_count) as event_count sum(scan_count) as scan_count values(exported) as exported values(searchtype) as searchtype values(eval(if(info="granted",null,info))) as search_status values(savedsearch_name) as savedsearch_name list(eval(commands(actualsearchnodm))) as searchcommands values(eval(if(info="granted" AND length(actualsearch)>0,user,null))) as user values(search_et) as earliest values(search_lt) as latest values(exec_time) as exec_time min(_time) as _time values(actualsearch) as actualsearch values(eval(if(info="granted" AND length(actualsearch)>5,host,null))) as SearchHead by searchid | eval earliest=if(earliest="N/A",0,earliest) | eval latest=if(latest="N/A",exec_time,latest) | eval user=mvfilter(user!="n/a") | eval savedsearch_name=if(searchtype="adhoc","",if(like(savedsearch_name, "search%") AND searchtype="dashboard","",savedsearch_name)) | eval Accuracy = round(event_count/scan_count*100,2) |eval WasShared = if(ACLHit>0,"yes","no") |eval WasExported = if(exported="export","yes","no") | fields - ACLHit exported  | search searchtype=* | eval search_et_diff = exec_time - earliest | eval search_lt_diff = exec_time - latest | eval time_bucket=case(etdiff<3600*9, "< 0" . round((etdiff+1800)/3600,0) . " hr(s)", etdiff<3600*25, "< " . round((etdiff+1800)/3600,0) . " hr(s)", etdiff<3600*24*9, "< 0" .  round((etdiff+3600*12)/(3600*24),0) . " days", etdiff<3600*24*34, "< " .  round((etdiff+3600*12)/(3600*24),0) . " days",1=1,"> 1 month")  | eval MVSearchCommands=mvjoin(searchcommands, "|") | eval ShouldInvestigate=`ShouldInvestigate` | where search_status != "" AND NOT isnull(search_status) AND actualsearch != "" AND NOT isnull(actualsearch)\

iseval = 0

[FillEvents_Search]
definition = (`internal_index` `scheduler_sourcetype` user!="nobody") OR \
(`auditindex` `auditsourcetype` info=granted search=*) OR \
(`auditindex` `auditsourcetype` action=login OR action="login attempt") OR \
(`internal_index` `web_access_sourcetype` GET user!="-") OR \
(`internal_index` `web_access_sourcetype` POST uri_path="*manager*" ) OR \
(`internal_index` `metrics_sourcetype` group=search_concurrency user) OR\
(`auditindex` `auditsourcetype` REST events OR results OR acl OR export) OR \
(`auditindex` `auditsourcetype` "action=search" "info=granted" search=*)\
\
| eval type=if(action="login" OR action="login attempt","login",null) \
| eval result=if(type="login",info,result) \
| rex field=uri_path "(\/[^\/ ]*)?\/app\/(?<myapp>[^\/ ]*)\/(?<myview>[^\/ \?]*)" \
| eval myview=if(myview="@go","savedsearch",myview) \
| rex field=uri_query "s=(?<mysearch>[^&]*)" \
| eval mysearch=if(myview="savedsearch",urldecode(mysearch),null) \
| eval type=if(len(myapp)>0 AND len(myview)>0,"weblog",type) \
| eval type=if(match(uri_path, ".*manager.*"),"manager",type) \
| rex "\/search\/jobs(\/[^\/]*)?(\/results|\/export|\/events)?\/(?<exported>export)"\
| eval type=if(match(source,"\/scheduler\.log(\.\d*)?"),"scheduler",type) \
| eval type=if(group="search_concurrency",group,type) \
| rename host as SearchHead\
| fields _time date_hour type uri_path mysearch myapp myview exported searchid myaction result user active_hist_searches active_realtime_searches status savedsearch_name alert_actions result_count SearchHead actualsearch
iseval = 0

[backfill_search_window]
definition = -1
iseval = 0

[backfill_search_internal]
definition = -1
iseval = 0

[backfill_events_internal]
definition = -1
iseval = 0

[backfill_events_window]
definition = -1
iseval = 0


[AdminEmailAddress]
definition = 
iseval = 0

[sendprettyemail(2)]
args = subject, bodytext
definition = sendresults msgstyle="table {display: none;} .outline {width:600px; border: 1px black solid; padding-left: 5px; padding-right: 5px;} .header {background-color: white; width: 590px; height: 50px; font-family: Gotham Narrow Bold, Gotham Narrow, Helvetica Rounded, Arial Rounded, Helvetica, Arial; font-weight boldest; font-size: 40px; color: black; } .headeranglebracket {color: #97999B} .smaller {font-size: 26px; font-weight: normal;}" subject="$subject$" body="<div class='outline'><div class='header'>splunk <span class='headeranglebracket'>&gt;</span> <span class='smaller'>listen to your data</span></div><div class='body'>$bodytext$</div></div>"
iseval = 0

[SendWelcomeEmail]
definition = sendresults showemail=f msgstyle="table {display: none;} .outline {width:600px; border: 1px black solid; padding-left: 5px; padding-right: 5px;} .header {background-color: white; width: 590px; height: 50px; font-family: Gotham Narrow Bold, Gotham Narrow, Helvetica Rounded, Arial Rounded, Helvetica, Arial; font-weight boldest; font-size: 40px; color: black; } .headeranglebracket {color: #97999B} .smaller {font-size: 26px; font-weight: normal;}" subject="Welcome To Splunk!" body="<div class='outline'><div class='header'>splunk <span class='headeranglebracket'>&gt;</span> <span class='smaller'>listen to your data</span></div><div class='body'><p>Hello!</p><p>We just noticed that you logged into Splunk for the first time (or the first time since we started collecting data). Splunk is a great data analysis platform, and we would like to share with you some resources that can help make your usage of Splunk more productive.</p><ul> <li>Free eLearning Class <a href='http://www.splunk.com/view/SP-CAAAH9U'>“What is Splunk”</a> and <a href='http://www.splunk.com/view/SP-CAAAHSK'>'Using Splunk'</a>.</li> <li>Free Splunk Demos <ul> <li>Live Splunk Enterprise Demo (every Wednesday 2:00pm EST) <a href='http://www.splunk.com/goto/demo'>here</a>.</li> <li>Splunk Enterprise Security Demo (every Thursday) <a href='http://bit.ly/1awRRuS'>here</a>.</li> </ul> </li> <li><a href='http://www.splunk.com/view/education-videos/SP-CAAAGB6'>Free Splunk Educational Videos</a></li> <li><a href='http://docs.splunk.com/Documentation/Splunk/latest/User/WelcometotheSplunktutorial'>Getting Started Splunk Tutorial</a></li> <li>Free - <a href='http://splunkbook.com'>The Splunk Book: Exploring Splunk</a> - Search Processing Language (SPL) Primer and Cookbook</li> <li><a href='http://docs.splunk.com/Documentation/Splunk/latest/Data/WhatSplunkcanmonitor'>Getting data into Splunk</a></li> <li><a href='http://docs.splunk.com/Documentation/Splunk/latest/SearchReference/ListOfPopularSearchCommands'>Common Search Queries/functions</a></li> <li><a href='http://docs.splunk.com/Documentation/Splunk/latest/SearchReference/SearchCheatsheet'>Splunk Search Cheat Sheet</a></li>        <li>We have a very active community. You can ask questions at <a href='http://answers.splunk.com/'>Splunk Answers</a>, find Splunk Inc. and Community created apps at <a href='http://apps.splunk.com/'>Splunk Apps</a>, enjoy educational sessions (and a happy hour) at regional <a href='http://www.splunk.com/page/events/splunklive'>SplunkLive!</a> or <a href='http://www.splunk.com/page/events/usergroups'>Splunk User Group</a> events, or come hang out on the <a href='http://www.splunk.com/view/SP-CAAACDF'>Splunk IRC Channel</a>!</li> </ul><p>Please don't hesitate to reach out to your local Splunk Administrators, or ask questions on <a href='http://answers.splunk.com/'>Splunk Answers</a> if you run into any isaes.</p><p>Thank you, <br />Your Splunk Administrators.</p></div></div>"
iseval = 0


[SA-LDAPSearch-Domain]
definition = apexrendered.com
iseval = 0

[SA-LDAPSearch-Generate-LDAPSearch]
definition = ldapsearch domain=`SA-LDAPSearch-Domain` search="(&(objectclass=user)(!(objectclass=computer)))"| fields description title cn dn sn name displayName givenName whenChanged sAMAccountName mail manager c l o st telephoneNumber department company directReports physicalDeliveryOfficeName | makemv directReports tokenizer="(?i)(CN=.*?dc=\S*)"| eval NumDirectReports = if(isnull(directReports),0,mvcount(directReports)) | fields - directReports _raw _time
iseval = 0

[SA-LDAPSearch-LDAPMgmtChain-Output-Lookup]
definition = | outputlookup LDAPMgmtChain
iseval = 0

[SA-LDAPSearch-Output-Lookup]
definition = | outputlookup LDAPSearch
iseval = 0

[SA-LDAPSearch-Regenerate-LDAPMgmtChain]
definition = inputlookup LDAPSearch.csv \
| lookup LDAPSearch.csv dn as manager OUTPUTNEW manager as managermanager sAMAccountName as managersAMAccountName displayName as managerdisplayname \
|eval managermanager=if(managermanager = manager, null, managermanager)\
| lookup LDAPSearch.csv dn as managermanager OUTPUTNEW manager as managermanagermanager sAMAccountName as managermanagersAMAccountName displayName as managermanagerdisplayname \
|eval managermanagermanager=if(managermanagermanager = managermanager, null, managermanagermanager)\
| lookup LDAPSearch.csv dn as managermanagermanager OUTPUTNEW manager as managermanagermanagermanager sAMAccountName as managermanagermanagersAMAccountName displayName as managermanagermanagerdisplayname \
|eval managermanagermanagermanager=if(managermanagermanagermanager = managermanagermanager, null, managermanagermanagermanager)\
| lookup LDAPSearch.csv dn as managermanagermanagermanager OUTPUTNEW manager as managermanagermanagermanagermanager sAMAccountName as managermanagermanagermanagersAMAccountName displayName as managermanagermanagermanagerdisplayname \
|eval managermanagermanagermanagermanager=if(managermanagermanagermanagermanager = managermanagermanagermanager, null, managermanagermanagermanagermanager)\
| lookup LDAPSearch.csv dn as managermanagermanagermanagermanager OUTPUTNEW manager as managermanagermanagermanagermanagermanager sAMAccountName as managermanagermanagermanagermanagersAMAccountName displayName as managermanagermanagermanagermanagerdisplayname \
|eval managermanagermanagermanagermanagermanager=if(managermanagermanagermanagermanagermanager = managermanagermanagermanagermanager, null, managermanagermanagermanagermanagermanager)\
| lookup LDAPSearch.csv dn as managermanagermanagermanagermanagermanager OUTPUTNEW manager as managermanagermanagermanagermanagermanagermanager sAMAccountName as managermanagermanagermanagermanagermanagersAMAccountName displayName as managermanagermanagermanagermanagermanagerdisplayname \
|eval managermanagermanagermanagermanagermanagermanager=if(managermanagermanagermanagermanagermanagermanager = managermanagermanagermanagermanagermanager, null, managermanagermanagermanagermanagermanagermanager)\
| lookup LDAPSearch.csv dn as managermanagermanagermanagermanagermanagermanager OUTPUTNEW manager as managermanagermanagermanagermanagermanagermanagermanager sAMAccountName as managermanagermanagermanagermanagermanagermanagersAMAccountName displayName as managermanagermanagermanagermanagermanagermanagerdisplayname \
|eval managermanagermanagermanagermanagermanagermanagermanager=if(managermanagermanagermanagermanagermanagermanagermanager = managermanagermanagermanagermanagermanagermanager, null, managermanagermanagermanagermanagermanagermanagermanager)\
| lookup LDAPSearch.csv dn as managermanagermanagermanagermanagermanagermanagermanager OUTPUTNEW manager as managermanagermanagermanagermanagermanagermanagermanagermanager sAMAccountName as managermanagermanagermanagermanagermanagermanagermanagersAMAccountName displayName as managermanagermanagermanagermanagermanagermanagermanagerdisplayname \
|eval managermanagermanagermanagermanagermanagermanagermanagermanager=if(managermanagermanagermanagermanagermanagermanagermanagermanager = managermanagermanagermanagermanagermanagermanagermanager, null, managermanagermanagermanagermanagermanagermanagermanagermanager)\
| lookup LDAPSearch.csv dn as managermanagermanagermanagermanagermanagermanagermanagermanager OUTPUTNEW manager as managermanagermanagermanagermanagermanagermanagermanagermanagermanager sAMAccountName as managermanagermanagermanagermanagermanagermanagermanagermanagersAMAccountName displayName as managermanagermanagermanagermanagermanagermanagermanagermanagerdisplayname \
|eval managermanagermanagermanagermanagermanagermanagermanagermanagermanager=if(managermanagermanagermanagermanagermanagermanagermanagermanagermanager = managermanagermanagermanagermanagermanagermanagermanagermanager, null, managermanagermanagermanagermanagermanagermanagermanagermanagermanager)\
| eval ManagementChain = "" \
| foreach manager*displayname [eval ManagementChain = mvappend(ManagementChain, <<FIELD>>)] \
| foreach manager*AccountName [eval ManagementChain_sAMAccountName = mvappend(ManagementChain_sAMAccountName, <<FIELD>>)] \
| fields - _time \
| fields sAMAccountName ManagementChain managerdisplayname ManagementChain_sAMAccountName \
| eval ManagementChain=mvjoin(ManagementChain, "|") \
| eval ManagementChain_sAMAccountName=mvjoin(ManagementChain_sAMAccountName, "|")
iseval = 0

[SA_Add_Tagged_Users(2)]
args = userlist,category
definition = inputlookup TaggedUsers | append [| stats count | eval user="$userlist$" | eval category="$category$" | eval date_tagged=now() | fields - count | makemv user delim="," | mvexpand user] | where len(user)>1 AND len(category)>1  | outputlookup TaggedUsers
errormsg = Error Validating User Names. Regex is provided to validate comma separated username list (no spaces), and category must not contain single or double quotation marks. Reference macro definition for more.
iseval = 0
validation = match(userlist, "^[a-zA-Z0-9,\.\+_\-]{2,}$") AND match(category, "^[^\"\']{2,}$")

[SA_Events]
definition = `SA_Root_Namespace`.events
iseval = 0

[SA_Root_Namespace]
definition = search_activity
iseval = 0

[SA_SearchHistory]
definition = `SA_Root_Namespace`.searchhistory
iseval = 0

[GenerateLDAPTree]
definition = inputlookup LDAPSearch.csv \
| rex field=dn "DC=(?<dpart1>[^,]*),DC=(?<dpart2>.*)" \
| eval host=dpart1 . "." . dpart2 \
| rename sAMAccountName as name dn as moid manager as parent \
| join type=left [\
| inputlookup LDAPMgmtChain \
| makemv ManagementChain_sAMAccountName delim="|" \
| stats count by ManagementChain_sAMAccountName \
| rename ManagementChain_sAMAccountName as name] \
| eval count=if(isnull(count),0,count) \
| eval type=if(count=0,"VirtualMachine","ClusterComputeResource") \
| eval parentType = "ClusterComputeResource" \
| eval parent=if(isnull(parent) OR parent=moid,"*",parent) \
| eval type=if(parent="*","RootFolder",type) \
| eval parentType=if(parent="*","RootFolder",parentType) \
| where NOT (count=0 AND parent="*") \
| append [ \
| stats count \
| eval host="apexrendered.com" \
| eval moid="*" \
| eval parent="N/A" \
| eval parentType="N/A" \
| eval type="N/A" \
| eval name="IsThisNecessary"] \
| appendcols [\
| tstats local=t count from `SA_SearchHistory` groupby user \
| sort - count \
| fields - count \
| where user!="splunk-system-user" AND user!="n/a" ] \
| search parent="*" \
| eval name = user \
| fields - user \
| outputlookup templookup.csv \
| append [\
|inputlookup templookup.csv \
| where type!="VirtualMachine" \
| eval isParent=1 ] \
| eval moid=if(type="ClusterComputeResource" AND isParent=1,"CN=Manager," . moid,moid) \
| eval type=if(type="ClusterComputeResource" AND isnull(isParent),"VirtualMachine",type) \
| eval parent=if(count>0 AND isnull(isParent) AND moid!="*", "CN=Manager," . moid, parent) \
| eval name=if(type="ClusterComputeResource" AND isParent=1, "M" . name ,name) \
| eval parent=if(parentType!="RootFolder" AND NOT like(parent,"CN=Manager%"),"CN=Manager," . parent, parent) \
| eval moid =if(parent="*" AND moid!="*","CN=Manager," . moid,moid) \
| where moid!="*" OR isParent=1 \
| eval parent=if(moid="*","N/A",parent) \
| sort name\
| fields host moid name parent parentType type
iseval = 0

[Generate_LastSeen_Lookup]
definition = tstats local=t max(_time) as LastSeen min(_time) as FirstSeen from `SA_SearchHistory` by user\
| lookup SA_User_Details user OUTPUT LastSeen as LastSeenLookup FirstSeen as FirstSeenLookup \
| foreach *Seen* [eval <<FIELD>>=if(isnull(<<FIELD>>),0,<<FIELD>>)]\
| eval FirstSeenFinal=if(FirstSeen>FirstSeenLookup AND FirstSeenLookup!=0,FirstSeenLookup,FirstSeen) \
| eval LastSeenFinal=if(LastSeen>LastSeenLookup AND LastSeen!=0,LastSeen,LastSeenLookup)\
| outputlookup SA_User_Details
iseval = 0

[SA_Search_Find-Reactivated-Users]
definition = | tstats local=t max(_time) as LastSeen from `SA_SearchHistory` by user | lookup SA_User_Details user OUTPUTNEW LastSeen as LastSeen_Lookup |  eval HasBeenOnlineRecently=if(LastSeen_Lookup > relative_time(now(), "-1mon"),"Yes","No") | eval WasOnJustNow=if(LastSeen > relative_time(now(), "-30min@min"),"Yes","No") | eval SendEmail=if(HasBeenOnlineRecently="No" AND WasOnJustNow="Yes","SendEmail","Don'tSendEmail") | where SendEmail="SendEmail" | fields user | fields - _time
iseval = 0

[ShouldInvestigate]
definition = case(match(MVSearchCommands,"^search\|search"),1,match(MVSearchCommands,"(\|rex){4,}"),1,scan_count>2000000,1,searchcommands="transaction",1,searchcommands="join",1,match(MVSearchCommands,"^search\|reverse"),1,1=1,0)
iseval = 0

[GenerateHostLDAPTree]
definition = inputlookup LDAPSearch.csv \
| eval host="hierarchy.local"\
| rename sAMAcNumDirectReportsName as name dn as moid manager as parent \
\
| eval type=if(NumDirectReports=0,"HostSystem","ClusterComputeResource") \
| eval parentType = "ClusterComputeResource" \
| eval parent=if(isnull(parent) OR parent=moid,"*",parent) \
| eval type=if(parent="*","RootFolder",type) \
| eval parentType=if(parent="*","RootFolder",parentType) \
| where NOT (NumDirectReports=0 AND parent="*") \
| append [ \
| stats count \
| eval host="hierarchy.local" \
| eval moid="*" \
| eval parent="N/A" \
| eval parentType="N/A" \
| eval type="N/A" \
| eval name="IsThisNecessary"] \
| append [\
|inputlookup LDAPSearch.csv  \
| eval host="hierarchy.local" \
| rename sAMAcNumDirectReportsName as name dn as moid manager as parent \
\
| eval type=if(NumDirectReports=0,"HostSystem","ClusterComputeResource") \
| eval parentType = "ClusterComputeResource" \
| eval parent=if(isnull(parent) OR parent=moid,"*",parent) \
| eval type=if(parent="*","RootFolder",type) \
| eval parentType=if(parent="*","RootFolder",parentType) \
| where NOT (NumDirectReports=0 AND parent="*") \
| where NumDirectReports>0 \
| eval isParent=1 ] \
| eval moid=if(type="ClusterComputeResource" AND isParent=1,"CN=Manager," . moid,moid) \
| eval type=if(type="ClusterComputeResource" AND isnull(isParent),"HostSystem",type) \
| eval parent=if(NumDirectReports>0 AND isnull(isParent) AND moid!="*", "CN=Manager," . moid, parent) \
| eval name=if((type="ClusterComputeResource" AND isParent=1) OR moid="*", name . " (Team)" ,name) \
| eval parent=if(parentType!="RootFolder" AND NOT like(parent,"CN=Manager%"),"CN=Manager," . parent, parent) \
| eval moid =if(parent="*" AND moid!="*","CN=Manager," . moid,moid) \
| where moid!="*" OR isParent=1 \
| eval parent=if(moid="*","N/A",parent) \
\
| fields host moid name parent parentType type
iseval = 0

[hierarchy_search_avg_accuracy]
definition = tstats local=t avg(accuracy) as avg_accuracy from `SA_SearchHistory`  groupby user
iseval = 0

[hierarchy_search_avg_run_time]
definition = tstats local=t avg(total_run_time) as avg_run_time from `SA_SearchHistory`  groupby user
iseval = 0

[hierarchy_search_avg_search_span_hours]
definition = tstats local=t avg(searchspan_h) as avg_search_span_hours from `SA_SearchHistory`  groupby user
iseval = 0

[hierarchy_search_has_exported]
definition = tstats local=t sum(NumExports) as has_exported from `SA_SearchHistory`  groupby user
iseval = 0

[hierarchy_search_has_run_adhoc_searches]
definition = tstats local=t count as has_run_adhoc_searches from `SA_SearchHistory` where searchtype=adhoc groupby user
iseval = 0

[hierarchy_search_has_run_dashboard_searches]
definition = tstats local=t count as has_run_dashboard_searches from `SA_SearchHistory` where searchtype=dashboard groupby user
iseval = 0

[hierarchy_search_has_run_realtime_searches]
definition = tstats local=t count as has_run_realtime_searches from `SA_SearchHistory` where searchtype=realtime groupby user
iseval = 0

[hierarchy_search_has_run_scheduled_searches]
definition = tstats local=t count as has_run_scheduled_searches from `SA_SearchHistory` where searchtype=scheduled groupby user
iseval = 0

[hierarchy_search_has_run_searches]
definition = tstats local=t count as has_run_searches from `SA_SearchHistory` groupby user
iseval = 0

[hierarchy_search_has_shared_results]
definition = tstats local=t count as has_shared_results from `SA_SearchHistory` where WasShared=yes groupby user
iseval = 0

[hierarchy_search_scan_count]
definition = tstats local=t avg(scan_count) as scan_count from `SA_SearchHistory`  groupby user
iseval = 0

[hierarchyThreshold]
definition = case( "$metric$" = "avg_run_time",case(avg_metric>400,0,avg_metric>200,1,1=1,2), "$metric$" = "has_exported",case(avg_metric>0,2,1=1,3), "$metric$" = "avg_search_span_hours",case(avg_metric>(7*24),0,avg_metric>(24),1,1=1,2), "$metric$" = "avg_accuracy",case(avg_metric<1,0,avg_metric<30,1,1=1,2), "$metric$" = "scan_count",case(avg_metric>1000000,0,avg_metric>10000,1,1=1,2), "$metric$" = "has_run_adhoc_searches",case(avg_metric>0,2,1=1,3), "$metric$" = "has_run_dashboard_searches",case(avg_metric>0,2,1=1,3), "$metric$" = "has_run_realtime_searches",case(avg_metric>0,2,1=1,3), "$metric$" = "has_run_scheduled_searches",case(avg_metric>0,2,1=1,3), "$metric$" = "has_run_searches",case(avg_metric>0,2,1=1,3), "$metric$" = "has_shared_results",case(avg_metric>0,2,1=1,3), 1=1,3)\
\
\
\
\
\
\
\
\
\
\

iseval = 0

[hierarchyThreshold(1)]
args = metric
definition = case( "$metric$" = "avg_run_time",case(avg_metric>400,0,avg_metric>200,1,1=1,2), "$metric$" = "has_exported",case(avg_metric>0,2,1=1,3), "$metric$" = "avg_search_span_hours",case(avg_metric>(7*24),0,avg_metric>(24),1,1=1,2), "$metric$" = "avg_accuracy",case(avg_metric<1,0,avg_metric<30,1,1=1,2), "$metric$" = "scan_count",case(avg_metric>1000000,0,avg_metric>10000,1,1=1,2), "$metric$" = "has_run_adhoc_searches",case(avg_metric>0,2,1=1,3), "$metric$" = "has_run_dashboard_searches",case(avg_metric>0,2,1=1,3), "$metric$" = "has_run_realtime_searches",case(avg_metric>0,2,1=1,3), "$metric$" = "has_run_scheduled_searches",case(avg_metric>0,2,1=1,3), "$metric$" = "has_run_searches",case(avg_metric>0,2,1=1,3), "$metric$" = "has_shared_results",case(avg_metric>0,2,1=1,3), 1=1,3)
iseval = 0

[SA_Config_LDAP]
definition = staticlookup
iseval = 0

[SA_Config_System]
definition = unconfigured
iseval = 0
